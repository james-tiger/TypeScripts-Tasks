{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kemom\\\\Downloads\\\\part2\\\\task8\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo, useCallback } from 'react';\nimport './App.css';\nimport BestEmployees from './components/BestEmployees';\nimport Team from './components/Team';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst profit = [5000, 15000, 10000, 20000, 25000, 15000, 25000, 30000];\nconst employees = [{\n  id: 1,\n  name: 'John',\n  surname: 'Doe',\n  salary: 5000,\n  position: 'Developer'\n}, {\n  id: 2,\n  name: 'Jane',\n  surname: 'Smith',\n  salary: 6000,\n  position: 'Designer'\n}, {\n  id: 3,\n  name: 'Bob',\n  surname: 'Johnson',\n  salary: 7000,\n  position: 'Manager'\n}, {\n  id: 4,\n  name: 'Alice',\n  surname: 'Williams',\n  salary: 4500,\n  position: 'Developer'\n}, {\n  id: 5,\n  name: 'Charlie',\n  surname: 'Brown',\n  salary: 8000,\n  position: 'Team Lead'\n}];\nfunction App() {\n  _s();\n  const [month, setMonth] = useState(1);\n  const [year, setYear] = useState(2023);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n\n  // This is an expensive calculation that should be memoized\n  const totalProfit = useMemo(() => {\n    console.log('Calculating total profit...');\n    return profit.reduce((sum, current) => sum + current, 0) * month;\n  }, [month]);\n\n  // Memoize the function to find the best employee\n  const getBestEmployee = useCallback(year => {\n    console.log('Finding best employee for year:', year);\n    // Simulating that different employees are best in different years\n    const index = year % employees.length;\n    return employees[index];\n  }, []);\n  const handleMonthChange = useCallback(e => {\n    setMonth(Number(e.target.value));\n  }, []);\n  const handleYearChange = useCallback(e => {\n    setYear(Number(e.target.value));\n  }, []);\n  const handleDateChange = useCallback(e => {\n    setSelectedDate(new Date(e.target.value));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Company Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"counters\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Month: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: month,\n          onChange: handleMonthChange,\n          min: \"1\",\n          max: \"12\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Year: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: year,\n          onChange: handleYearChange,\n          min: \"2020\",\n          max: \"2030\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profit-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Company Profit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total profit for \", month, \" months: $\", totalProfit]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"date-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Selected Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: selectedDate.toISOString().split('T')[0],\n        onChange: handleDateChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Selected date: \", selectedDate.toLocaleDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BestEmployees, {\n      year: year,\n      getBestEmployee: getBestEmployee\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Team, {\n      employees: employees\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lcQ+E1aBOSw2bbrs1D7tPvU70+0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useMemo","useCallback","BestEmployees","Team","jsxDEV","_jsxDEV","profit","employees","id","name","surname","salary","position","App","_s","month","setMonth","year","setYear","selectedDate","setSelectedDate","Date","totalProfit","console","log","reduce","sum","current","getBestEmployee","index","length","handleMonthChange","e","Number","target","value","handleYearChange","handleDateChange","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","min","max","toISOString","split","toLocaleDateString","_c","$RefreshReg$"],"sources":["C:/Users/kemom/Downloads/part2/task8/src/App.tsx"],"sourcesContent":["import React, { useState, useMemo, useCallback } from 'react';\r\nimport './App.css';\r\nimport BestEmployees from './components/BestEmployees';\r\nimport Team from './components/Team';\r\n\r\nconst profit = [5000, 15000, 10000, 20000, 25000, 15000, 25000, 30000];\r\nconst employees = [\r\n  { id: 1, name: 'John', surname: 'Doe', salary: 5000, position: 'Developer' },\r\n  { id: 2, name: 'Jane', surname: 'Smith', salary: 6000, position: 'Designer' },\r\n  { id: 3, name: 'Bob', surname: 'Johnson', salary: 7000, position: 'Manager' },\r\n  { id: 4, name: 'Alice', surname: 'Williams', salary: 4500, position: 'Developer' },\r\n  { id: 5, name: 'Charlie', surname: 'Brown', salary: 8000, position: 'Team Lead' },\r\n];\r\n\r\nfunction App() {\r\n  const [month, setMonth] = useState(1);\r\n  const [year, setYear] = useState(2023);\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n\r\n  // This is an expensive calculation that should be memoized\r\n  const totalProfit = useMemo(() => {\r\n    console.log('Calculating total profit...');\r\n    return profit.reduce((sum, current) => sum + current, 0) * month;\r\n  }, [month]);\r\n\r\n  // Memoize the function to find the best employee\r\n  const getBestEmployee = useCallback((year) => {\r\n    console.log('Finding best employee for year:', year);\r\n    // Simulating that different employees are best in different years\r\n    const index = year % employees.length;\r\n    return employees[index];\r\n  }, []);\r\n\r\n  const handleMonthChange = useCallback((e) => {\r\n    setMonth(Number(e.target.value));\r\n  }, []);\r\n\r\n  const handleYearChange = useCallback((e) => {\r\n    setYear(Number(e.target.value));\r\n  }, []);\r\n\r\n  const handleDateChange = useCallback((e) => {\r\n    setSelectedDate(new Date(e.target.value));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Company Dashboard</h1>\r\n      \r\n      <div className=\"counters\">\r\n        <div>\r\n          <label>Month: </label>\r\n          <input \r\n            type=\"number\" \r\n            value={month} \r\n            onChange={handleMonthChange} \r\n            min=\"1\" \r\n            max=\"12\"\r\n          />\r\n        </div>\r\n        \r\n        <div>\r\n          <label>Year: </label>\r\n          <input \r\n            type=\"number\" \r\n            value={year} \r\n            onChange={handleYearChange} \r\n            min=\"2020\" \r\n            max=\"2030\"\r\n          />\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"profit-section\">\r\n        <h2>Company Profit</h2>\r\n        <p>Total profit for {month} months: ${totalProfit}</p>\r\n      </div>\r\n      \r\n      <div className=\"date-section\">\r\n        <h2>Selected Date</h2>\r\n        <input \r\n          type=\"date\" \r\n          value={selectedDate.toISOString().split('T')[0]} \r\n          onChange={handleDateChange}\r\n        />\r\n        <p>Selected date: {selectedDate.toLocaleDateString()}</p>\r\n      </div>\r\n      \r\n      <BestEmployees year={year} getBestEmployee={getBestEmployee} />\r\n      \r\n      <Team employees={employees} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}