{"ast":null,"code":"// Mock data for playlists\nconst playlists = [{\n  id: '1',\n  name: 'Rock Classics',\n  genre: 'Rock',\n  tracks: [{\n    title: 'Bohemian Rhapsody',\n    artist: 'Queen',\n    duration: '5:55'\n  }, {\n    title: 'Stairway to Heaven',\n    artist: 'Led Zeppelin',\n    duration: '8:02'\n  }, {\n    title: 'Hotel California',\n    artist: 'Eagles',\n    duration: '6:30'\n  }]\n}, {\n  id: '2',\n  name: 'Pop Hits',\n  genre: 'Pop',\n  tracks: [{\n    title: 'Shape of You',\n    artist: 'Ed Sheeran',\n    duration: '3:53'\n  }, {\n    title: 'Bad Guy',\n    artist: 'Billie Eilish',\n    duration: '3:14'\n  }, {\n    title: 'Blinding Lights',\n    artist: 'The Weeknd',\n    duration: '3:20'\n  }]\n}, {\n  id: '3',\n  name: 'Jazz Favorites',\n  genre: 'Jazz',\n  tracks: [{\n    title: 'Take Five',\n    artist: 'Dave Brubeck',\n    duration: '5:24'\n  }, {\n    title: 'So What',\n    artist: 'Miles Davis',\n    duration: '9:22'\n  }, {\n    title: 'Autumn Leaves',\n    artist: 'Cannonball Adderley',\n    duration: '6:48'\n  }]\n}, {\n  id: '4',\n  name: 'Classical Masterpieces',\n  genre: 'Classical',\n  tracks: [{\n    title: 'Moonlight Sonata',\n    artist: 'Ludwig van Beethoven',\n    duration: '15:00'\n  }, {\n    title: 'Four Seasons - Spring',\n    artist: 'Antonio Vivaldi',\n    duration: '10:31'\n  }, {\n    title: 'Canon in D',\n    artist: 'Johann Pachelbel',\n    duration: '5:30'\n  }]\n}, {\n  id: '5',\n  name: 'Ambient Noise',\n  genre: 'Non Music',\n  tracks: [{\n    title: 'White Noise',\n    artist: 'Nature Sounds',\n    duration: '60:00'\n  }, {\n    title: 'Rain Sounds',\n    artist: 'Nature Sounds',\n    duration: '45:00'\n  }]\n}];\n\n// Modify users to include playlists\nconst updatedUsers = [{\n  id: '1',\n  name: 'John Doe',\n  email: 'john@example.com',\n  location: 'New York, USA',\n  joined: '2020-01-15T10:30:00',\n  avatar: 'https://randomuser.me/api/portraits/men/1.jpg',\n  playlist: playlists[0]\n}, {\n  id: '2',\n  name: 'Jane Smith',\n  email: 'jane@example.com',\n  location: 'London, UK',\n  joined: '2020-02-20T14:20:00',\n  avatar: 'https://randomuser.me/api/portraits/women/2.jpg',\n  playlist: playlists[1]\n}, {\n  id: '3',\n  name: 'Bob Johnson',\n  email: 'bob@example.com',\n  location: 'Sydney, Australia',\n  joined: '2020-03-25T09:15:00',\n  avatar: 'https://randomuser.me/api/portraits/men/3.jpg',\n  playlist: playlists[2]\n}];\n\n// Helper function to simulate API delay\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// API functions\nexport const getUsers = async () => {\n  await delay(500);\n  return [...updatedUsers];\n};\nexport const getUserById = async id => {\n  await delay(300);\n  const user = updatedUsers.find(user => user.id === id);\n  return user || null;\n};\n\n// Playlist API functions\nexport const getAllPlaylists = async () => {\n  await delay(500);\n  return [...playlists];\n};\nexport const getPlaylistById = async id => {\n  await delay(300);\n  const playlist = playlists.find(playlist => playlist.id === id);\n  return playlist || null;\n};","map":{"version":3,"names":["playlists","id","name","genre","tracks","title","artist","duration","updatedUsers","email","location","joined","avatar","playlist","delay","ms","Promise","resolve","setTimeout","getUsers","getUserById","user","find","getAllPlaylists","getPlaylistById"],"sources":["C:/Users/kemom/Downloads/part2/task6/src/api/api.ts"],"sourcesContent":["// Mock data for playlists\r\nconst playlists = [\r\n  {\r\n    id: '1',\r\n    name: 'Rock Classics',\r\n    genre: 'Rock',\r\n    tracks: [\r\n      { title: 'Bohemian Rhapsody', artist: 'Queen', duration: '5:55' },\r\n      { title: 'Stairway to Heaven', artist: 'Led Zeppelin', duration: '8:02' },\r\n      { title: 'Hotel California', artist: 'Eagles', duration: '6:30' }\r\n    ]\r\n  },\r\n  {\r\n    id: '2',\r\n    name: 'Pop Hits',\r\n    genre: 'Pop',\r\n    tracks: [\r\n      { title: 'Shape of You', artist: 'Ed Sheeran', duration: '3:53' },\r\n      { title: 'Bad Guy', artist: 'Billie Eilish', duration: '3:14' },\r\n      { title: 'Blinding Lights', artist: 'The Weeknd', duration: '3:20' }\r\n    ]\r\n  },\r\n  {\r\n    id: '3',\r\n    name: 'Jazz Favorites',\r\n    genre: 'Jazz',\r\n    tracks: [\r\n      { title: 'Take Five', artist: 'Dave Brubeck', duration: '5:24' },\r\n      { title: 'So What', artist: 'Miles Davis', duration: '9:22' },\r\n      { title: 'Autumn Leaves', artist: 'Cannonball Adderley', duration: '6:48' }\r\n    ]\r\n  },\r\n  {\r\n    id: '4',\r\n    name: 'Classical Masterpieces',\r\n    genre: 'Classical',\r\n    tracks: [\r\n      { title: 'Moonlight Sonata', artist: 'Ludwig van Beethoven', duration: '15:00' },\r\n      { title: 'Four Seasons - Spring', artist: 'Antonio Vivaldi', duration: '10:31' },\r\n      { title: 'Canon in D', artist: 'Johann Pachelbel', duration: '5:30' }\r\n    ]\r\n  },\r\n  {\r\n    id: '5',\r\n    name: 'Ambient Noise',\r\n    genre: 'Non Music',\r\n    tracks: [\r\n      { title: 'White Noise', artist: 'Nature Sounds', duration: '60:00' },\r\n      { title: 'Rain Sounds', artist: 'Nature Sounds', duration: '45:00' }\r\n    ]\r\n  }\r\n];\r\n\r\n// Modify users to include playlists\r\nconst updatedUsers = [\r\n  {\r\n    id: '1',\r\n    name: 'John Doe',\r\n    email: 'john@example.com',\r\n    location: 'New York, USA',\r\n    joined: '2020-01-15T10:30:00',\r\n    avatar: 'https://randomuser.me/api/portraits/men/1.jpg',\r\n    playlist: playlists[0]\r\n  },\r\n  {\r\n    id: '2',\r\n    name: 'Jane Smith',\r\n    email: 'jane@example.com',\r\n    location: 'London, UK',\r\n    joined: '2020-02-20T14:20:00',\r\n    avatar: 'https://randomuser.me/api/portraits/women/2.jpg',\r\n    playlist: playlists[1]\r\n  },\r\n  {\r\n    id: '3',\r\n    name: 'Bob Johnson',\r\n    email: 'bob@example.com',\r\n    location: 'Sydney, Australia',\r\n    joined: '2020-03-25T09:15:00',\r\n    avatar: 'https://randomuser.me/api/portraits/men/3.jpg',\r\n    playlist: playlists[2]\r\n  }\r\n];\r\n\r\n// Helper function to simulate API delay\r\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// API functions\r\nexport const getUsers = async () => {\r\n  await delay(500);\r\n  return [...updatedUsers];\r\n};\r\n\r\nexport const getUserById = async (id: string) => {\r\n  await delay(300);\r\n  const user = updatedUsers.find(user => user.id === id);\r\n  return user || null;\r\n};\r\n\r\n// Playlist API functions\r\nexport const getAllPlaylists = async () => {\r\n  await delay(500);\r\n  return [...playlists];\r\n};\r\n\r\nexport const getPlaylistById = async (id: string) => {\r\n  await delay(300);\r\n  const playlist = playlists.find(playlist => playlist.id === id);\r\n  return playlist || null;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}